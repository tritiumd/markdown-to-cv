services:
  adminer:
    image: adminer
    restart: always
    networks:
      - traefik-public
      - backend
    depends_on:
      - db
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DESIGN=delus
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.rule=Host(`0.0.0.0`) && PathPrefix(`/adminer`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.middlewares=https-redirect
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.rule=Host(`${DOMAIN?Variable not set}`) && PathPrefix(`/adminer`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.tls.certresolver=le
      - traefik.http.services.${STACK_NAME?Variable not set}-adminer.loadbalancer.server.port=8080


  db:
    image: postgres:13
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    volumes:
      - markdown_db:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - backend

  redis:
    image: redis:7.4.0
    networks:
      - backend

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    volumes:
      - ./backend:/src
      - $DATA_FOLDER_PATH_DOCKER:/data
      - $DATA_FOLDER_PATH_ENGINE:/engine
    expose:
      - 8000
    depends_on:
      - db
      - redis
    env_file:
      - .env
    networks:
      - backend
      - traefik-public
    user: "${UID}:${GID}"
    working_dir: "/src"
    command: ["./script/start-api.sh"]
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=8000

      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=(Host(`localhost`) || Host(`cv.${DOMAIN?Variable not set}`)) && (PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`) || PathPrefix(`/openapi.json`))
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.entrypoints=http

      # - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.rule=(Host(`localhost`) || Host(`cv.${DOMAIN?Variable not set}`)) && (PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`))
      # - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.entrypoints=https
      # - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls=true
      # - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls.certresolver=le

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    deploy:
      mode: replicated
      replicas: 1
    environment:
      - DATA_FOLDER_PATH_DEPLOY:/engine/deploy
      - DATA_FOLDER_PATH_MARKDOWN:/data/markdown
      - DATA_FOLDER_PATH_HTML:/data/html
      - DATA_FOLDER_PATH_YAML:/data/yaml
      - REDIS_HOST=redis
    expose:
      - 3000
    volumes:
      - ./backend/worker:/worker
      - $DATA_FOLDER_PATH_ENGINE:/engine
      - $DATA_FOLDER_PATH_DOCKER:/data
    depends_on:
      - db
      - redis
    networks:
      - backend
    user: "${UID}:${GID}"
    command: ["sh", "./start-worker.sh"]

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.frontend
      args:
        - NODE_ENV=production
        - NEXT_PUBLIC_BASE_URL=https://cv.${DOMAIN?Variable not set}}/api/v1
    volumes:
      - ./worker:/worker
      - $DATA_FOLDER_PATH_ENGINE:/engine
      - $DATA_FOLDER_PATH_DOCKER:/data        
    networks:
      - frontend
      - traefik-public
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=3000

      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=Host(`localhost`) || Host(`cv.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.entrypoints=http

      # - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`cv.${DOMAIN?Variable not set}`)
      # - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.entrypoints=https
      # - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.tls=true
      # - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.tls.certresolver=le

      # # Enable www redirection for HTTP and HTTPS
      # - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.middlewares=${STACK_NAME?Variable not set}-www-redirect
      # - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.middlewares=https-redirect,${STACK_NAME?Variable not set}-www-redirect

volumes:
  markdown_db:

networks:
  backend:
  frontend:
  traefik-public:
    # Allow setting it to false for testing
    external: true